// Generated by CoffeeScript 1.9.3
(function() {
  var WawaTitleButton,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  WawaTitleButton = (function(superClass) {
    extend(WawaTitleButton, superClass);

    function WawaTitleButton() {
      return WawaTitleButton.__super__.constructor.apply(this, arguments);
    }

    WawaTitleButton.prototype.name = 'wtitle';

    WawaTitleButton.prototype.htmlTag = 'h1, h2, h3, h4';

    WawaTitleButton.prototype.disableTag = 'pre, table';

    WawaTitleButton.prototype._init = function() {
      this.menu = [
        {
          name: 'normal',
          text: this._t('normalText'),
          param: 'p'
        }, '|', {
          name: 'h1',
          text: this._t('title') + ' 1',
          param: 'h1'
        }, {
          name: 'h2',
          text: this._t('title') + ' 2',
          param: 'h2'
        }
      ];
      return WawaTitleButton.__super__._init.call(this);
    };

    WawaTitleButton.prototype.setActive = function(active, param) {
      WawaTitleButton.__super__.setActive.call(this, active);
      this.el.removeClass('active-p active-h1 active-h2 active-h3');
      if (active) {
        return this.el.addClass('active active-' + param);
      }
    };

    WawaTitleButton.prototype.status = function($node) {
      var param, ref;
      if ($node != null) {
        this.setDisabled($node.is(this.disableTag));
      }
      if (this.disabled) {
        return true;
      }
      if ($node != null) {
        param = (ref = $node[0].tagName) != null ? ref.toLowerCase() : void 0;
        this.setActive($node.is(this.htmlTag), param);
      }
      return this.active;
    };

    WawaTitleButton.prototype.command = function(param) {
      var $contents, $endBlock, $startBlock, endNode, j, len, node, range, ref, results, startNode;
      range = this.editor.selection.getRange();
      startNode = range.startContainer;
      endNode = range.endContainer;
      $startBlock = this.editor.util.closestBlockEl(startNode);
      $endBlock = this.editor.util.closestBlockEl(endNode);
      this.editor.selection.save();
      range.setStartBefore($startBlock[0]);
      range.setEndAfter($endBlock[0]);
      $contents = $(range.extractContents());
      results = [];
      $contents.children().each((function(_this) {
        return function(i, el) {
          var c, converted, j, len, results1;
          converted = _this._convertEl(el, param);
          results1 = [];
          for (j = 0, len = converted.length; j < len; j++) {
            c = converted[j];
            results1.push(results.push(c));
          }
          return results1;
        };
      })(this));
      ref = results.reverse();
      for (j = 0, len = ref.length; j < len; j++) {
        node = ref[j];
        range.insertNode(node[0]);
      }
      this.editor.selection.restore();
      return this.editor.trigger('valuechanged');
    };

    WawaTitleButton.prototype._convertEl = function(el, param) {
      var $block, $el, results;
      $el = $(el);
      results = [];
      if ($el.is(param)) {
        results.push($el);
      } else {
        $block = $('<' + param + '/>').append($el.contents());
        results.push($block);
      }
      return results;
    };

    return WawaTitleButton;

  })(Simditor.Button);

  Simditor.Toolbar.addButton(WawaTitleButton);

}).call(this);
