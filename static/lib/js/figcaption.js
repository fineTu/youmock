// Generated by CoffeeScript 1.9.3
(function() {
  var FigcaptionButton,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  FigcaptionButton = (function(superClass) {
    extend(FigcaptionButton, superClass);

    function FigcaptionButton() {
      return FigcaptionButton.__super__.constructor.apply(this, arguments);
    }

    FigcaptionButton.prototype.name = 'figcaption';

    FigcaptionButton.prototype.icon = 'img-annot';

    FigcaptionButton.prototype.htmlTag = 'figcaption';

    FigcaptionButton.prototype.cssName = 'img-annot';

    FigcaptionButton.prototype.status = function($node) {
      var activated;
      activated = FigcaptionButton.__super__.status.call(this, $node);
      if (!$node) {
        return activated;
      }
      if (activated) {
        this._activated = $node;
      }
      return activated;
    };

    FigcaptionButton.prototype.command = function(param) {
      if (this.status()) {
        return this.unMark(param);
      } else {
        return this.setMark(param);
      }
    };

    FigcaptionButton.prototype.unMark = function(param) {
      var $node, contents;
      if (!this._activated) {
        return;
      }
      $node = $(this._activated);
      contents = $node.contents();
      $node.parent().append(contents);
      return $node.detach();
    };

    FigcaptionButton.prototype.setMark = function(param) {
      var $contents, $endBlock, $startBlock, endNode, j, len, node, range, ref, results, startNode;
      range = this.editor.selection.getRange();
      startNode = range.startContainer;
      endNode = range.endContainer;
      $startBlock = this.editor.util.closestBlockEl(startNode);
      $endBlock = this.editor.util.closestBlockEl(endNode);
      this.editor.selection.save();
      range.setStartBefore($startBlock[0]);
      range.setEndAfter($endBlock[0]);
      $contents = $(range.extractContents());
      results = [];
      $contents.children().each((function(_this) {
        return function(i, el) {
          var c, converted, j, len, results1;
          converted = _this._convertEl(el, param);
          results1 = [];
          for (j = 0, len = converted.length; j < len; j++) {
            c = converted[j];
            results1.push(results.push(c));
          }
          return results1;
        };
      })(this));
      ref = results.reverse();
      for (j = 0, len = ref.length; j < len; j++) {
        node = ref[j];
        range.insertNode(node[0]);
      }
      this.editor.selection.restore();
      return this.editor.trigger('valuechanged');
    };

    FigcaptionButton.prototype._convertEl = function(el, param) {
      var $block, $el, results;
      $el = $(el);
      results = [];
      if ($el.is(param)) {
        results.push($el);
      } else {
        $block = $("<figcaption/>").append($el.contents());
        results.push($block);
      }
      return results;
    };

    return FigcaptionButton;

  })(Simditor.Button);

  Simditor.Toolbar.addButton(FigcaptionButton);

}).call(this);
