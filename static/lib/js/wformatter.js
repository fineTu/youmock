// Generated by CoffeeScript 1.9.3
(function() {
  var WFormatter, connectCustomizedFormmater,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  WFormatter = (function(superClass) {
    extend(WFormatter, superClass);

    function WFormatter() {
      return WFormatter.__super__.constructor.apply(this, arguments);
    }

    WFormatter.pluginName = 'Formatter';

    WFormatter.prototype._init = function() {
      return WFormatter.__super__._init.apply(this, arguments);
    };

    WFormatter.prototype.cleanNode = function(node, recursive) {
      var $childImg, $node, $p, $td, allowedAttributes, attr, contents, isDecoration, j, k, len, len1, n, ref, ref1, text, textNode;
      $node = $(node);
      if (!($node.length > 0)) {
        return;
      }
      if ($node[0].nodeType === 3) {
        text = $node.text().replace(/(\r\n|\n|\r)/gm, '');
        if (text) {
          textNode = document.createTextNode(text);
          $node.replaceWith(textNode);
        } else {
          $node.remove();
        }
        return;
      }
      contents = $node.contents();
      isDecoration = $node.is('[class^="simditor-"]');
      if ($node.is(this._allowedTags.join(',')) || isDecoration) {
        if ($node.is('a') && ($childImg = $node.find('img')).length > 0) {
          $node.replaceWith($childImg);
          $node = $childImg;
          contents = null;
        }
        if ($node.is('img') && $node.hasClass('uploading')) {
          $node.remove();
        }
        if (!isDecoration) {
          allowedAttributes = this._allowedAttributes[$node[0].tagName.toLowerCase()];
          ref = $.makeArray($node[0].attributes);
          for (j = 0, len = ref.length; j < len; j++) {
            attr = ref[j];
            if (!((allowedAttributes != null) && (ref1 = attr.name, indexOf.call(allowedAttributes, ref1) >= 0))) {
              $node.removeAttr(attr.name);
            }
            this._cleanNodeStyles($node);
          }
        }
      } else if ($node[0].nodeType === 1 && !$node.is(':empty')) {
        if ($node.is('div, article, dl, header, footer, tr')) {
          $node.append('<br/>');
          contents.first().unwrap();
        } else if ($node.is('table')) {
          $p = $('<p/>');
          $node.find('tr').each(function(i, tr) {
            return $p.append($(tr).text() + '<br/>');
          });
          $node.replaceWith($p);
          contents = null;
        } else if ($node.is('thead, tfoot')) {
          $node.remove();
          contents = null;
        } else if ($node.is('th')) {
          $td = $('<td/>').append($node.contents());
          $node.replaceWith($td);
        } else {
          contents.first().unwrap();
        }
      } else {
        $node.remove();
        contents = null;
      }
      if (recursive && (contents != null) && !$node.is('pre')) {
        for (k = 0, len1 = contents.length; k < len1; k++) {
          n = contents[k];
          this.cleanNode(n, true);
        }
      }
      return null;
    };

    return WFormatter;

  })(Simditor.Formatter);

  connectCustomizedFormmater = function() {
    Simditor._connectedClasses.splice(Simditor._connectedClasses.indexOf(Simditor.Formatter), 1, WFormatter);
    Simditor.connect(WFormatter);
    return Simditor._connectedClasses.pop();
  };

  connectCustomizedFormmater();

}).call(this);
